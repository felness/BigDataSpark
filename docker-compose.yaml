include:
  - 'devops/postgres/docker-compose-postgres.yaml'
  - 'devops/clickhouse/docker-compose-clickhouse.yaml'
  - 'devops/cassandra/docker-compose-cassandra.yaml'
  - 'devops/neo4j/docker-compose-neo4j.yaml'
  - 'devops/mongo/docker-compose-mongo.yaml'
  - 'devops/valkey/docker-compose-valkey.yaml'

services:
  spark-master:
    build:
      context: .
      dockerfile: Dockerfile-spark
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - '7077:7077'
      - '8080:8080'
    volumes:
      - ./app:/app
      - ./mock_data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - shared

  spark-worker:
    build:
      context: .
      dockerfile: Dockerfile-spark
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=6g
      - SPARK_EXECUTOR_MEMORY=2g
      - SPARK_WORKER_OPTS=-Dspark.worker.cleanup.enabled=true
    volumes:
      - ./app:/app
      - ./mock_data:/app/data
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 8G
    depends_on:
      spark-master:
        condition: service_healthy
    networks:
      - shared

  spark-submit:
    build:
      context: .
      dockerfile: Dockerfile-spark-submit
    container_name: spark-submit
    volumes:
      - ./app:/app
      - ./mock_data:/app/data
      - ./scripts/submit.sh:/opt/bitnami/spark/submit.sh
    depends_on:
      spark-master:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      valkey:
        condition: service_healthy
    tty: true
    stdin_open: true
    networks:
      - shared

networks:
  shared:
    driver: bridge

volumes:
  postgres_data:
  mongo_data:
  cassandra_data:
  clickhouse_data:
  neo4j_data:
  valkey_data: